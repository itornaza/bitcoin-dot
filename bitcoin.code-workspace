{
    /** bitcoind.code-workspace
     *
     * Configuration file for debugging bitcoin with the help of the visual
     * studio code debugging aide. Requires a local installation of LLVM 
     * that matches Bitcoin prerequisites
     *
     * Part of the btc-dot project https://github.com/itornaza/btc-dot 
     */

    "folders": [
    {
        // Path to the bitcoin fork root directory
        "path": "../bitcoin"
    }
    ],
    "settings": {},
    "launch": 
    {
        "configurations": [
        {
            /** Launch lldb on bitcoind
             *
             * - Run as standalone on bitcoind
             * - It is called implicitly by the attach config below after
             *   initiating a python debug session on a functional test
             * - No need to provide any extra arguments
             */
            "name": "Debug bitcoind",
            "type": "lldb",
            "request": "launch",

            // Run bicoind with bitcoin.conf settings and no extra arguments
            "program": "${workspaceFolder}/build/src/bitcoind",
            "args": [],
            
            "cwd": "${workspaceFolder}"
            "stopAtEntry": false,
            "externalConsole": true,
            "MIMode": "lldb",
            "miDebuggerPath": "/opt/homebrew/opt/llvm/bin/lldb"
        },
        {
            /** Launch lldb on test_bitcoin
             *
             * - Launches a debug session on a particular unit test in cpp which
             *   is tightly connected to the cpp codebase as well
             * - Specify the module and the unit test names in the `args` section
             */
            "name": "Debug unit test",
            "type": "lldb",
            "request": "launch",
            
            // Run a unit test by defining the module and test names in args
            "program": "${workspaceFolder}/build/src/test/test_bitcoin",
            
            // Enter the test category and test case as in the following comment
            //"args": ["--run_test=system_tests/run_command"],
            "args": ["--run_test=net_tests/cnetaddr_serialize_v1"],
            
            "cwd": "${workspaceFolder}"
            "stopAtEntry": false,
            "externalConsole": true,
            "MIMode": "lldb",
            "miDebuggerPath": "/opt/homebrew/opt/llvm/bin/lldb"
        },
        {
            /** Launch lldb on python test
             *
             * - Set the name of the desired functional test in the `program`
             *   section below
             * - Set a breakpoint somewhere before the call to cpp
             */
            "name": "Debug functional test",
            "type": "python",
            "request": "launch",
            "program": "${workspaceFolder}/build/test/functional/feature_taproot.py",
            "console": "integratedTerminal"
        },
        {
            /**  Attach bitcoind to an existing python functional test session
             *
             * - Launch a `Debug functional test` session first
             * - When it stops at the breakpoint in python, select and run the
             *   attach debug configuration
             * - Attach the python process id that has the token from the 
             *   dropdown list and then select play and step over to get 
             *   to the breakpoint in the cpp file
             * - Set a breakpoint inside the cpp file that the functional test
             *   is going to call so the debugger will actually stop somewhere!!
             */
            "name": "Attach bitcoind to functional test",
            "type": "lldb",
            "request": "attach",
            "program": "${workspaceFolder}/build/src/bitcoind",
            "processId": "${command:pickProcess}",
            "MIMode": "lldb",
            "cwd": "${workspaceFolder}"
        }
        ],
        "version": "2.0.0"
    }
}


